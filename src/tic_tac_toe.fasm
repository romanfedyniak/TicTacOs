format binary as "bin"
    use16               ; 16-bit mode
    org 7c00h           ; offset

bootloader:
    ; load program to memory
    ; buffer address pointer 0000h:0500h
    mov ax, 0000h
    mov es, ax
    mov bx, 500h
    mov ch, 0       ; cylinder
    mov cl, 2       ; sector
    mov dh, 0       ; head
    mov al, 2       ; sectors to read
    mov ah, 02h
    int 13h

    ; video mode 320Ñ…200 256 colors
    mov ah, 0h
    mov al, 13h
    int 10h

    jmp 0000h:start

times 510 - ($-$$) db 0
dw 0xAA55


org 500h

VGA_OFFSET = 0xA000

WIDTH = 320
HEIGHT = 200

GRID_SIZE = 150
GRID_X = WIDTH / 2 - GRID_SIZE / 2
GRID_Y = HEIGHT / 2 - GRID_SIZE / 2
GRID_LINE_THICKNESS = 5
GRID_CELL_SIZE = GRID_SIZE / 3 - ((GRID_SIZE / 3 / 10) * 3) ; GRID_SIZE / 3 * 0.7
X_THICKNESS = 6
O_THICKNESS = 3

BLACK = 00h
WHITE = 0Fh
RED = 0Ch
BLUE = 01h

K_LEFT_ARROW = 4Bh
K_UP_ARROW = 48h
K_RIGHT_ARROW = 4Dh
K_DOWN_ARROW = 50h
K_ENTER = 1Ch

macro draw_O x, y
{
    push x
    push y
    call _draw_O
}

macro draw_rect width, height, x, y
{
    push width
    push height
    push x
    push y
    call _draw_rect
}

EMPTY_CELL = 0
X_CELL = 1
O_CELL = 2

struc GameState
{
    ; ic - initial cell
    .cells db 9 dup EMPTY_CELL
    .select db 0
    .turn db X_CELL
}

virtual at 7E00h
    game_state GameState
end virtual

start:
    mov dword [0x0070], draw

    ; initialize game state
    mov cx, GameStateSize
    mov si, initial_game_state
    mov di, game_state
    rep movsb

.loop:
    hlt
    ; if key pressed
    mov ah, 1h
    int 16h
    jz .loop

    mov ah, 0h
    int 16h

    cmp ah, K_ENTER
    jnz @F
    jmp .turn
@@:
    cmp ah, K_LEFT_ARROW
    jnz @F
    sub byte [game_state.select], 1
    jmp .move_highlight
@@:
    cmp ah, K_RIGHT_ARROW
    jnz @F
    add byte [game_state.select], 1
    jmp .move_highlight
@@:
    cmp ah, K_UP_ARROW
    jnz @F
    sub byte [game_state.select], 3
    jmp .move_highlight
@@:
    cmp ah, K_DOWN_ARROW
    jnz .loop
    add byte [game_state.select], 3
    jmp .move_highlight

.move_highlight:
    mov ah, [game_state.select]
    test ah, ah
    js .negative
    cmp byte [game_state.select], 8
    jng .loop
    sub ah, 9
    mov [game_state.select], ah
    jmp .loop
.negative:
    add ah, 9
    mov [game_state.select], ah
    jmp .loop

.turn:
    movzx di, byte [game_state.select]
    ; if cell != EMPTY_CELL
    cmp byte [game_state.cells + di], EMPTY_CELL
    jne .loop
    mov ah, [game_state.turn]
    mov byte [game_state.cells + di], ah
    ; if turn == X_CELL
    cmp ah, X_CELL
    je @F
    ; else
    mov byte [game_state.turn], X_CELL
    jmp .loop
@@:
    mov byte [game_state.turn], O_CELL
    jmp .loop


draw:
    pusha

    mov ax, 0x0000
    mov ds, ax
    mov ax, VGA_OFFSET
    mov es, ax

.clear:
    xor di, di
    mov cx, WIDTH * HEIGHT
    mov al, WHITE
    rep stosb

draw_select:
    push GRID_SIZE / 3 ; width
    push GRID_SIZE / 3 ; height
    movzx ax, byte [game_state.select]
    mov bl, 3
    div bl
    push ax
    mov cl, GRID_SIZE / 3
    mov al, ah
    mul cl
    mov dx, ax
    add dx, GRID_X
    pop ax
    push dx ; x
    mul cl
    mov dx, ax
    add dx, GRID_Y
    push dx ; y
    mov al, 65h
    call _draw_rect

draw_board:
    mov al, BLACK

    ; horizontal lines
    draw_rect GRID_SIZE, GRID_LINE_THICKNESS, GRID_X, GRID_Y + GRID_SIZE / 3 - GRID_LINE_THICKNESS / 2 - 1
    draw_rect GRID_SIZE, GRID_LINE_THICKNESS, GRID_X, GRID_Y + GRID_SIZE / 3 * 2 - GRID_LINE_THICKNESS / 2 - 1

    ; vertical lines
    draw_rect GRID_LINE_THICKNESS, GRID_SIZE, GRID_X + GRID_SIZE / 3 - GRID_LINE_THICKNESS / 2 - 1, GRID_Y
    draw_rect GRID_LINE_THICKNESS, GRID_SIZE, GRID_X + GRID_SIZE / 3 * 2 - GRID_LINE_THICKNESS / 2 - 1, GRID_Y
    jmp draw_cells


x dw ?
y dw ?
draw_cells:
    mov si, game_state.cells
    mov [y], 0
.loop:
    mov [x], 0

@@:
    mov bx, GRID_X + ((GRID_SIZE / 3) - GRID_CELL_SIZE) / 2
    add bx, [x]
    mov cx, GRID_Y + ((GRID_SIZE / 3) - GRID_CELL_SIZE) / 2
    add cx, [y]

    lodsb ; load next cell from si
    cmp al, EMPTY_CELL
    jz .next_cell
    cmp al, X_CELL
    jz .draw_X
    cmp al, O_CELL
    jz .draw_O

.draw_X:
    mov al, RED
    sub bx, X_THICKNESS / 2
    call draw_X
    jmp .next_cell
.draw_O:
    mov al, BLUE
    draw_O bx, cx
    jmp .next_cell

.next_cell:
    add [x], (GRID_SIZE / 3)
    cmp [x], 3 * (GRID_SIZE / 3)
    jne @B

    add [y], (GRID_SIZE / 3)
    cmp [y], 3 * (GRID_SIZE / 3)
    jne .loop

.end:
    popa
    iret


draw_X:
    ; al - color
    ; bx - x
    ; cx - y
    push bx
    push cx
    push dx
    push di

    imul cx, WIDTH
    add bx, cx
    mov di, bx
    add di, -WIDTH - 1 ; compensation
    mov dx, GRID_CELL_SIZE * WIDTH + GRID_CELL_SIZE
.loop1:
    mov cx, X_THICKNESS
    push di
    add di, dx
    rep stosb
    pop di
    sub dx, WIDTH + 1
    jnz .loop1

    mov dx, GRID_CELL_SIZE * WIDTH - GRID_CELL_SIZE
    mov di, bx
    add di, GRID_CELL_SIZE - WIDTH
.loop2:
    mov cx, X_THICKNESS
    push di
    add di, dx
    rep stosb
    pop di
    sub dx, WIDTH - 1
    jnz .loop2
.end:
    pop di
    pop dx
    pop cx
    pop bx
    ret


_draw_rect:
    ; al - color
    ; stack: width, height, x, y
    width equ bp+10
    height equ bp+8
    x equ bp+6
    y equ bp+4

    push bp
    mov bp, sp

    mov cx, [width]
    imul di, [y], WIDTH
    add di, [x]
.loop:
    push cx
    rep stosb
    pop cx
    sub di, cx
    add di, WIDTH
    dec word [height]
    jnz .loop

.end:
    leave
    ret 4*2


radius dw ?
xi dw ?
err_o dw ?
err_i dw ?
yi dw ?
_draw_O:
    ; al - color
    ; stack: x, y
    x equ bp+6
    y equ bp+4
    mov [radius], GRID_CELL_SIZE / 2

    push bp
    mov bp, sp
    push bx
    push cx
    push dx

    mov bx, [radius]
    add [x], bx
    add [y], bx
    mov [yi], 0
    mov [err_o], 1
    sub [err_o], bx
    mov [xi], bx
    sub [xi], O_THICKNESS
    mov bx, [xi]
    mov [err_i], 1
    sub [err_i], bx

.loop:
    ; radius >= yi
    mov bx, [radius]
    cmp bx, [yi]
    jnge .end

    mov cx, [x]
    add cx, [xi]
    mov bx, [x]
    add bx, [radius]
    mov dx, [y]
    add dx, [yi]
    call x_line

    mov dx, [y]
    sub dx, [yi]
    call x_line

    mov cx, [x]
    sub cx, [radius]
    mov bx, [x]
    sub bx, [xi]
    call x_line

    mov dx, [y]
    add dx, [yi]
    call x_line

    mov cx, [x]
    sub cx, [yi]
    mov dx, [y]
    add dx, [xi]
    mov bx, [y]
    add bx, [radius]
    call y_line

    mov cx, [x]
    add cx, [yi]
    call y_line

    mov dx, [y]
    sub dx, [radius]
    mov bx, [y]
    sub bx, [xi]
    call y_line

    mov cx, [x]
    sub cx, [yi]
    call y_line

    inc word [yi]
.condition1:
    ; err_o < 0
    cmp [err_o], 0
    jnl .else1

    ; err_o += 2 * yi + 1
    imul bx, [yi], 2
    add bx, 1
    add [err_o], bx
    jmp .condition2
.else1:
    sub word [radius], 1
    ; err_o += 2 * (yi - radius + 1)
    mov bx, [yi]
    sub bx, [radius]
    add bx, 1
    imul bx, 2
    add [err_o], bx
.condition2:
    ; yi > radius - thickness
    mov bx, [radius]
    sub bx, O_THICKNESS
    cmp [yi], bx
    jng .else2

    mov bx, [yi]
    mov [xi], bx
    jmp .loop
.else2:
.condition3:
    ; err_i < 0
    cmp [err_i], 0
    jnl .else3

    ; err_i += 2 * yi + 1
    imul bx, [yi], 2
    add bx, 1
    add [err_i], bx
    jmp .loop
.else3:
    sub [xi], 1
    ; err_i += 2 * (yi - xi + 1)
    mov bx, [yi]
    sub bx, [xi]
    add bx, 1
    imul bx, 2
    add [err_i], bx
    jmp .loop
.end:
    pop dx
    pop cx
    pop bx
    leave
    ret 2*2 ; delete param from stack

x_line:
    ; al - color
    ; cx - x1
    ; bx - x2
    ; dx - y
    push cx
.loop:
    cmp cx, bx
    jnle .end
    imul di, dx, WIDTH
    add di, cx
    mov [es:di], al
    add cx, 1
    jmp .loop
.end:
    pop cx
    ret

y_line:
    ; al - color
    ; cx - x
    ; dx - y1
    ; bx - y2
    push dx
.loop:
    cmp dx, bx
    jnle .end
    imul di, dx, WIDTH
    add di, cx
    mov [es:di], al
    add dx, 1
    jmp .loop
.end:
    pop dx
    ret


initial_game_state GameState
GameStateSize = $-initial_game_state
times 1024 - ($-$$) db 0
